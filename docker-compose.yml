services:

  # Backend API Service
  geotech-ai-backend:
    build: ./backend
    container_name: geotech-ai-backend
    ports:
      - "8000:8000"
    env_file:
      - .env
    environment:
      - QDRANT_HOST=qdrant
      - QDRANT_PORT=6333
      - MONGODB_HOST=mongodb
      - MONGODB_PORT=27017
      - ENVIRONMENT=production
      - PYTHONUNBUFFERED=1
    volumes:
      - "./logs:/app/logs"
      - "./backend/data:/app/data"
    depends_on:
      setup:
        condition: service_completed_successfully
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Frontend React App  
  geotech-ai-frontend:
    build: ./frontend
    container_name: geotech-ai-frontend
    ports:
      - "3000:3000"
    environment:
      - VITE_API_URL=http://localhost:8000
    volumes:
      - "./frontend/src:/app/src"  # Hot reload for development
    depends_on:
      - geotech-ai-backend
    restart: unless-stopped

  # Database Setup Service
  setup:
    build: ./backend
    container_name: geotech-setup
    env_file:
      - .env
    environment:
      - QDRANT_HOST=qdrant
      - MONGODB_HOST=mongodb
    depends_on:
      - mongodb
      - qdrant
    command: ["python", "scripts/setup_vectordb_with_contextualization.py"]
    restart: "no"

  mongodb:
    image: mongo:7.0
    container_name: geotech-mongodb
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
    restart: unless-stopped

  qdrant:
    image: qdrant/qdrant:v1.14.1
    container_name: geotech-qdrant
    ports:
      - "6333:6333"
      - "6334:6334"
    volumes:
      - qdrant_data:/qdrant/storage
    restart: unless-stopped

volumes:
  mongodb_data:
  qdrant_data:

networks:
  default:
    name: geotech-network